// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: orderQueries.sql

package sqlc

import (
	"context"
	"encoding/json"
)

const addOrder = `-- name: AddOrder :one
INSERT INTO "orders" (order_uid,order_json) VALUES($1,$2) RETURNING order_uid, order_json
`

type AddOrderParams struct {
	OrderUid  string          `json:"order_uid"`
	OrderJson json.RawMessage `json:"order_json"`
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, addOrder, arg.OrderUid, arg.OrderJson)
	var i Order
	err := row.Scan(&i.OrderUid, &i.OrderJson)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT order_uid, order_json from "orders"
`

func (q *Queries) GetOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.OrderUid, &i.OrderJson); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
